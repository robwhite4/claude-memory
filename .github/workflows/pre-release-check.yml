name: Pre-Release Check

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  check-release-readiness:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check tests
        run: npm test
      
      - name: Check linting
        run: npm run lint
      
      - name: Check test coverage
        run: npm run test:coverage
      
      - name: Dry run build
        run: npm pack --dry-run
      
      - name: Comment on PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Release Readiness Check')
            );
            
            const checksPassed = ${{ job.status == 'success' }};
            const body = `## üöÄ Release Readiness Check
            
            ${checksPassed ? '‚úÖ **All checks passed!**' : '‚ùå **Some checks failed**'}
            
            - Tests: ${{ steps.tests.outcome || 'pending' }}
            - Linting: ${{ steps.linting.outcome || 'pending' }}
            - Coverage: ${{ steps.coverage.outcome || 'pending' }}
            - Build: ${{ steps.build.outcome || 'pending' }}
            
            ${checksPassed ? 'This PR is ready for release!' : 'Please fix the failing checks before release.'}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }